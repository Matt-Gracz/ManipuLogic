@startuml
LogicalConstruct <|-- LogicalContent : inherets <
LogicalConstruct <|-- Proposition : inherets <
LogicalContent "1" *-- LogicalContent : contains >
Proposition "1" --* LogicalConstruct : contains >
ComplexProp "1" --* "2" Proposition : contains >
Proposition <|-- SimpleProp : inherets <
Proposition <|-- ComplexProp : inherets <
LogicalConstruct <|-- Law : inherets <
LogicalConstruct <|-- Operator: inherets <
SimpleProp --* "1" LogicalContent : contains >
ComplexProp --* "1" Operator : contains >
Operator --* "many" Law : contains >
Proposition --* "1" PropType : contains >
Operator --* "1" OpType : contains >
Operator <|-- Quantifier : inherets <
Quantifier <|-- ExistQuant : inherets <
Quantifier <|-- UniversalQuant : inherets <
LogicalContent <|-- Variable : inherets <
LogicalContent <|-- Object : inherets <
LogicalContent <|-- Predicate : inherets <
Operator <|-- FirstOrderOp : inherets <
Quantifier --* "1" FirstOrderOp : contains >
Quantifier --* "1" Proposition : contains >
Proposition <|-- FirstOrderProp : inherets <
FirstOrderProp --* "0/1" Variable : contains >
FirstOrderProp --* "0/1" Object :contains
FirstOrderProp --* "1" Predicate : inherets


enum PropType
{
	SIMPLE
    COMPLEX
}

enum OpType
{
	DISJUNCT
    CONJUCT
    IMPL
    XOR
}

class LogicalConstruct
{
    string : toString()
    void : print()
}

class LogicalContent 
{
	string rawData
}

class Proposition
{
	void : applyOperator(Operator op)
}

class SimpleProp
{
	bool negated
}

class ComplexProp
{
	//Has LHS and RHS propositions
}

class Operator
{
	dict{} lawApplicationRules
    void : applyLaw(Law law)
}

class Law
{
	dict{} operatorMapping
}



@enduml